# Model Template for any method
# This YAML file represents the configuration of a mathematical model named "method1" within an industrial process.

# Model information
name: method1 # The name of the model without spaces. It must be the same name as the method folder.

# 'id' represents the unique identifier for the model within a specific industry process.
# It is composed by the industry name, the process name and the model name separated by '_'.
id: industry-process_a-method1
description: A description # A description of the model
version: 1.0.0 # The version of the model
debug: false # If true, the model will be executed in debug mode. In this mode, the model will print the operations and
             # values of the operations.

# Constants are values that are not expected to change during the simulation. These values are defined beforehand.
constants:
  - name: alpha # constant name. It must be unique within the model, and it must not contain spaces.
    label: alpha # constant label used to represent the constant in the block diagram.
    description: constant1 description # A description of the constant
    source: https://www.google.com # Cite, source or reference of the constant
    value: 0.25 # The value of the constant
    units: km # The units of the constant

    # more constants can be defined here
    # .

# Inputs relates to the values that are used as inputs for the model. These values might change during the simulation.
# The values can be defined here, or they can be gotten from other models. If the value is obtained from other model,
# the 'from' field must be defined with the id of such model, and it's name must be the name of the output of the model.
#
# For example, if the 'industry-process_a-method2' has an output named 'Xo', and this method needs
# this value as input, the 'from' field of the input 'Xo' of  this model must be defined as 'industry-process_a-method2'.
#
inputs:
  - name: a0 # name of the input. It must be unique within the model, and it must not contain spaces.
    label: a0 # label used to represent the input in the block diagram.
    description: a0 description # A description of the input
    value: 10 # The value of the input
    units: m
    from: null  # null if the value is defined here, or the id of the model if the value is obtained from other model.

  - name: b0
    label: b0
    description: b0 description
    value: 20
    from: null

  - name: Xo
    label: Xo
    description: Xo description
    value: null
    # In this case the value of the input Xo is obtained from the output Xo of the model method2
    from: industry-process_a-method2


    # more inputs can be defined here


# Outputs relates to the values that are obtained from the model. These values are calculated from the inputs, constants
# and other outputs of the model. The 'operation' field defines the operation that is used to calculate the output.
#
# Outputs can be vectors. In this case the 'range' field must be defined with the variable that is used as the range of
# the vector. The 'start', 'end' and 'step' fields define the start, end and step of the range.
# In the case of the vectorized outputs that are inputs of other outputs, the last value of the vector is used.
outputs:
  - name: Ao # output name. It must be unique within the model, and it must not contain spaces.
    label: Ao # label used to represent the output in the block diagram.
    operation: a0 + b0 # sympy valid expression (https://docs.sympy.org/latest/index.html)
    range:
      variable: t
      start: 0
      end: 10
      step: 1
    args:
      ## The args field defines the inputs and constants that are used in the operation. In this case the operation is
      ## f(a0,b0) so the args field must contain the inputs a0 and b0.
      - name: a0
        type: inputs
      - name: b0
        type: inputs
    description: output1 description
    value: null

  - name: Bo
    label: Bo
    operation: a0 + b0 * alpha
    args:
      - name: a0
        type: inputs
      - name: b0
        type: inputs
      - name: alpha
        type: constants
    description: output2 description
    value: null

  ## In this case the output Co is obtained from the outputs Ao and Bo of the model method1.
  - name: Co
    label: Co
    operation: Ao + Bo
    args:
      - name: Ao
        type: outputs
      - name: Bo
        type: outputs
    description: output3 description
    value: null

    # more outputs can be defined here