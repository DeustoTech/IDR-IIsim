""" $description """

# Constants
NAME = $fullname
$constants

# units
UNITS = $units

class $name:
    """ $name industry """

    def __init__($args):
        """ constructor """
        self.__validate_total_production($outcome_name)
        self.__$outcome_name = $outcome_name
        $constructor_method

    def __validate_total_production(self, $outcome_name) -> None:
        if $outcome_name < $min_units or $outcome_name > $max_units:
            raise ValueError(
                "The production should be a value between $min_units and $max_units"
            )

$process_methods
$get_methods
    def csv(self, separator: str = ";") -> None:
        """ print the industry as CSV format """
        attributes = vars(self)
        lines = [[], []]
        for name, value in attributes.items():
            name = name.replace(f"_{self.__class__.__name__}__", "")
            if name in UNITS:
                unit = UNITS[name]
                lines[0].append(name)
                lines[1].append(str(value))
                lines[0].append(name + "_unit")
                lines[1].append(unit)
        for line in lines:
            print(separator.join(line))

    def __str__(self) -> str:
        final_str = NAME
        final_str += "\n" + "-" * len(final_str) + "\n"
        attributes = vars(self)
        for name, value in attributes.items():
            name = name.replace(f"_{self.__class__.__name__}__", "")
            if name in UNITS:
                unit = UNITS[name]
                print_name = name.replace("_", " ").title()
                final_str += f"{print_name}: {value:.2f} {unit}\n"
        return final_str
